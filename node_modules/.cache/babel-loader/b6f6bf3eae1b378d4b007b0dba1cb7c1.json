{"ast":null,"code":"// import PortfolioContainer from \"../containers/PortfolioContainer\";\n// import history from './history'\n// import {b} from 'react-router';\n// **import Popup from 'reactjs-popup';\n// let symbl;\n// const real_api = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbl}&apikey=18BGJDXOZO2QLLIU`\n// const API = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=MSFT&apikey=demo`\nconst id = localStorage.uid; // const all_symbols = ['AAPL','MSFT','V',' GOOGL', 'AMZN']\n// const all_symbols = ['AAPL','MSFT','V','GOOGL', 'AMZN']\n\nconst all_symbols = ['MSFT']; // const NEW_API= `https://api.intrinio.com/prices/exchange?identifier=USCOMP&price_date=2019-07-25&api_key=OjZjM2IwOTIxMTEyMWVjZTQzNDVkM2Y5NmM0NjcyMTc2`\n\nconst NEW_API = \"https://api.intrinio.com/pricesexchange?identifier=USCOMP&api_key=OjZjM2IwOTIxMTEyMWVjZTQzNDVkM2Y5NmM0NjcyMTc2\"; // OjFlMjFhNTEzNGI1MWY1MzNiZGRjNjgyNjNjNjFiZmEx\n// OjZjM2IwOTIxMTEyMWVjZTQzNDVkM2Y5NmM0NjcyMTc2\n\nexport const getStocks = () => dispatch => {\n  all_symbols.map(symbl => // fetch(API)\n  // fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbl}&apikey=18BGJDXOZO2QLLIU`)\n  fetch(NEW_API).then(res => res.json()).then(data => dispatch({\n    type: \"GET_STOCKS\",\n    data: data.data\n  })));\n};\nexport const handleChange = e => dispatch => {\n  e.target.name === 'username' ? dispatch({\n    type: 'CHANGE_USER',\n    'username': e.target.value\n  }) : dispatch({\n    type: 'CHANGE_PASS',\n    'password': e.target.value\n  });\n};\nexport const getPortfolio = e => dispatch => {\n  // e.preventDefault()\n  fetch(\"http://localhost:3000/portfolio/show_all?user_id=\".concat(id)).then(res => res.json()).then(data => {\n    // console.log(data)\n    dispatch({\n      type: \"PORT_HISTORY\",\n      data: data.portfolio\n    });\n  });\n}; // export const getUserWithId =()=> dispatch => {\n//   fetch(`http://localhost:3000/users/${id}`)\n//   .then(res => res.json())\n//   .then(data => { \n//     console.log('user', data)\n//     localStorage.setItem('portfolio', JSON.stringify(data.portfolio))\n//     dispatch({ type: 'GET_PORTFOLIO',portfolio: data.portfolio })\n//   })\n// }\n\nexport const handleSignUp = e => dispatch => {\n  e.preventDefault();\n  let newUserObject = {\n    firstname: e.target.firstname.value,\n    lastname: e.target.lastname.value,\n    username: e.target.username.value,\n    password: e.target.password.value,\n    email: e.target.email.value\n  };\n  fetch('http://localhost:3000/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      user: newUserObject\n    })\n  }).then(res => res.json()).then(data => {\n    if (data.errors) {\n      alert(\"Sorry, your username or password is incorrect.\");\n      dispatch({\n        type: 'SIGNUP_ERROR',\n        errors: data.message\n      });\n    } else {\n      localStorage.setItem('token', data.token); // browserHistory.push('/login')\n      // this.props.history.push('/login')\n      // history.push('/login')\n    }\n  });\n};\nexport const searchStock = e => dispatch => {\n  e.preventDefault(); // console.log(e.target)\n\n  fetch(\"https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=BA&apikey=demo\").then(res => res.json()).then(data => dispatch({\n    type: 'SEARCH_STOCK',\n    payload: data[\"bestMatches\"]\n  }));\n};\nexport const handleLogin = (e, user, history) => dispatch => {\n  e.preventDefault();\n  fetch('http://localhost:3000/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(res => res.json()).then(data => {\n    if (data.errors) {\n      dispatch({\n        type: 'LOGIN_ERROR',\n        error: data.errors\n      });\n      localStorage.setItem('logged', false);\n      alert('Incorrect Username or Password! ');\n    } else {\n      history.push('/dashboard');\n      localStorage.setItem('logged', true);\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('uid', data.user.id);\n      localStorage.setItem('firstname', data.user.firstname);\n      localStorage.setItem('portfolio', JSON.stringify(data.user.portfolios));\n      localStorage.setItem('reamining_balance', data.user.remaining_balance);\n      localStorage.setItem('invested_balance', data.user.invested_balance);\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        user: data.user,\n        logged: true,\n        portfolio: data.user.portfolios\n      });\n    }\n  });\n}; //   STOCK\n\nexport const buyStock = (e, eachStock, balance) => dispatch => {\n  e.preventDefault(); // console.log(e.target)\n\n  let stock = {\n    price: parseFloat(eachStock['close']),\n    ticker: eachStock['ticker'],\n    quantity: parseFloat(e.target.quantity.value),\n    total_price: parseFloat(eachStock['close'] * e.target.quantity.value),\n    user_id: parseFloat(localStorage.uid)\n  };\n\n  if (balance.remaining_balance < stock.total_price) {\n    alert('Not Enough Balance');\n    return;\n  }\n\n  let user = {\n    remaining_balance: balance.remaining_balance - stock.total_price,\n    invested_balance: balance.invested_balance + stock.total_price\n  };\n  fetch(\"http://localhost:3000/portfolios\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify({\n      portfolio: stock\n    })\n  });\n  fetch(\"http://localhost:3000/users/\".concat(id), {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"Access-Token\": localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      user: user\n    })\n  }).then(res => res.json().then(data => console.log(data)));\n  dispatch({\n    type: 'BUY_STOCK',\n    payload: stock\n  });\n  e.target.reset();\n}; // Persist portfolio and balance\n// export const persistData =()=> dispatch=>{\n//   console.log('running')\n//   fetch(`http://localhost:3000/users/${id}`)\n//   .then(res => res.json())\n//   .then(data=> \n//     {console.log(data)\n//   dispatch({type:'LOGIN_SUCCESS', user: data.user, logged: true, portfolio: data.user.portfolios})}\n//   )\n// }\n// logout\n\nexport const handleLogout = (e, history) => dispatch => {\n  // console.log(e.target)\n  e.preventDefault();\n  localStorage.clear(); // console.log(history.push)\n\n  dispatch({\n    type: 'LOGOUT',\n    logged: false\n  });\n  history.push('/');\n};\nexport const sellStock = (e, eachStock, balance) => dispatch => {\n  e.preventDefault(); // console.log(e.target)\n\n  let stock = {\n    price: parseFloat(eachStock.price),\n    ticker: eachStock.ticker,\n    quantity: -parseInt(e.target.quantity.value),\n    total_price: -parseFloat(eachStock.price * e.target.quantity.value),\n    user_id: parseInt(localStorage.uid)\n  };\n  let user = {\n    remaining_balance: balance.remaining_balance - stock.total_price,\n    invested_balance: balance.invested_balance + stock.total_price\n  };\n  fetch(\"http://localhost:3000/portfolios\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify({\n      portfolio: stock\n    })\n  });\n  fetch(\"http://localhost:3000/users/\".concat(id), {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"Access-Token\": localStorage.getItem('token')\n    },\n    body: JSON.stringify({\n      user: user\n    })\n  }).then(res => res.json().then(data => console.log(data)));\n  dispatch({\n    type: 'SELL_STOCK',\n    payload: stock\n  });\n  e.target.reset();\n};","map":{"version":3,"sources":["/Users/Krunal/Desktop/Investiversity/frontend/src/actions/stockActions.js"],"names":["id","localStorage","uid","all_symbols","NEW_API","getStocks","dispatch","map","symbl","fetch","then","res","json","data","type","handleChange","e","target","name","value","getPortfolio","portfolio","handleSignUp","preventDefault","newUserObject","firstname","lastname","username","password","email","method","headers","body","JSON","stringify","user","errors","alert","message","setItem","token","searchStock","payload","handleLogin","history","error","push","portfolios","remaining_balance","invested_balance","logged","buyStock","eachStock","balance","stock","price","parseFloat","ticker","quantity","total_price","user_id","getItem","console","log","reset","handleLogout","clear","sellStock","parseInt"],"mappings":"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","sourcesContent":["// import PortfolioContainer from \"../containers/PortfolioContainer\";\n\n// import history from './history'\n// import {b} from 'react-router';\n// **import Popup from 'reactjs-popup';\n// let symbl;\n// const real_api = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbl}&apikey=18BGJDXOZO2QLLIU`\n// const API = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=MSFT&apikey=demo`\nconst id = localStorage.uid\n// const all_symbols = ['AAPL','MSFT','V',' GOOGL', 'AMZN']\n// const all_symbols = ['AAPL','MSFT','V','GOOGL', 'AMZN']\nconst all_symbols = ['MSFT']\n// const NEW_API= `https://api.intrinio.com/prices/exchange?identifier=USCOMP&price_date=2019-07-25&api_key=OjZjM2IwOTIxMTEyMWVjZTQzNDVkM2Y5NmM0NjcyMTc2`\nconst NEW_API= `https://api.intrinio.com/pricesexchange?identifier=USCOMP&api_key=OjZjM2IwOTIxMTEyMWVjZTQzNDVkM2Y5NmM0NjcyMTc2`\n\n// OjFlMjFhNTEzNGI1MWY1MzNiZGRjNjgyNjNjNjFiZmEx\n\n// OjZjM2IwOTIxMTEyMWVjZTQzNDVkM2Y5NmM0NjcyMTc2\n\n\n\n\nexport const getStocks = () => dispatch => {\n    \n   all_symbols.map(symbl => \n    // fetch(API)\n    // fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbl}&apikey=18BGJDXOZO2QLLIU`)\n    fetch(NEW_API)\n    .then(res => res.json())\n    .then(data => \n      dispatch({ type: \"GET_STOCKS\", data: data.data })\n      )\n    )\n}\n\n\n\nexport const handleChange = (e) => dispatch=>{\n\n  e.target.name ==='username'?\n  dispatch(\n    { type: 'CHANGE_USER', 'username': e.target.value}\n  ) \n  : \n  dispatch(\n      { type: 'CHANGE_PASS', 'password': e.target.value}\n    ) \n  \n}\n\n\nexport const getPortfolio =(e)=> dispatch => {\n  // e.preventDefault()\n  fetch(`http://localhost:3000/portfolio/show_all?user_id=${id}`)\n    .then(res => res.json())\n    .then(data => {\n      // console.log(data)\n      dispatch({ type: \"PORT_HISTORY\", data: data.portfolio })\n    })\n}\n\n\n// export const getUserWithId =()=> dispatch => {\n//   fetch(`http://localhost:3000/users/${id}`)\n//   .then(res => res.json())\n//   .then(data => { \n//     console.log('user', data)\n//     localStorage.setItem('portfolio', JSON.stringify(data.portfolio))\n//     dispatch({ type: 'GET_PORTFOLIO',portfolio: data.portfolio })\n//   })\n// }\n\n\nexport const handleSignUp=(e)=> dispatch => {\n    \n  e.preventDefault()\n\n  let newUserObject ={\n    firstname: e.target.firstname.value,\n    lastname: e.target.lastname.value,\n    username: e.target.username.value,\n    password: e.target.password.value,\n    email: e.target.email.value\n  }\n \n  fetch('http://localhost:3000/users',{\n    method:'POST',\n    headers:{\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n  },\n    body:JSON.stringify({ user: newUserObject})\n    })\n    .then(res=> res.json())\n    .then(data => {\n\n      if (data.errors) {\n        alert(\"Sorry, your username or password is incorrect.\")\n        dispatch({ type: 'SIGNUP_ERROR',errors: data.message })\n      }\n      else {\n\n        localStorage.setItem('token', data.token)\n        // browserHistory.push('/login')\n        // this.props.history.push('/login')\n       \n        // history.push('/login')\n      }\n    })\n}\n\n export const searchStock =(e) => dispatch => {\n  e.preventDefault()\n  // console.log(e.target)\n  fetch(\"https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=BA&apikey=demo\")\n  .then(res => res.json())\n  .then(data => dispatch({\n    type: 'SEARCH_STOCK',\n    payload: data[\"bestMatches\"]\n  }))\n }\n\n export const  handleLogin =(e, user,history) => dispatch=> {\n  e.preventDefault()\n\n  fetch('http://localhost:3000/login', {\n    method: 'POST',\n    headers:{\n      'Content-Type': 'application/json', \n    }, \n    body: JSON.stringify(user)\n  })\n  .then(res => res.json())\n  .then(data => { \n\n    if(data.errors){\n      dispatch({type: 'LOGIN_ERROR', error: data.errors})\n      localStorage.setItem('logged',false)\n      alert('Incorrect Username or Password! ')\n    }\n    else {\n\n      history.push('/dashboard')\n      localStorage.setItem('logged',true)\n      localStorage.setItem('token', data.token)\n      localStorage.setItem('uid', data.user.id)\n      localStorage.setItem('firstname', data.user.firstname)\n      localStorage.setItem('portfolio',JSON.stringify(data.user.portfolios))\n      localStorage.setItem('reamining_balance', data.user.remaining_balance)\n      localStorage.setItem('invested_balance', data.user.invested_balance)\n      \n      dispatch({type:'LOGIN_SUCCESS', user: data.user, logged: true, portfolio: data.user.portfolios})\n    }\n  })\n\n}\n\n\n//   STOCK\nexport const buyStock = (e, eachStock, balance)=> dispatch=> {\n  e.preventDefault()\n  // console.log(e.target)\n  \n  let stock ={\n\n    price: parseFloat(eachStock['close']),\n    ticker: eachStock['ticker'],\n    quantity: parseFloat(e.target.quantity.value),\n    total_price: parseFloat(eachStock['close'] * e.target.quantity.value),\n    user_id: parseFloat(localStorage.uid)\n\n  }\n\n  if(balance.remaining_balance < stock.total_price){\n    alert('Not Enough Balance')\n    return \n  }\n\n  let user ={\n    remaining_balance: balance.remaining_balance - stock.total_price,\n    invested_balance: balance.invested_balance + stock.total_price\n  }\n  \n  fetch(`http://localhost:3000/portfolios`,{\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n      body: JSON.stringify({portfolio: stock})\n    })\n  \n    fetch(`http://localhost:3000/users/${id}`,{\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Access-Token\":localStorage.getItem('token')\n      },\n        body: JSON.stringify({user: user})\n      })\n      .then(res=> res.json()\n    .then(data=> console.log(data)))\n    \n\n\n  dispatch({type: 'BUY_STOCK', payload: stock})\n  e.target.reset()\n\n  }\n\n\n// Persist portfolio and balance\n// export const persistData =()=> dispatch=>{\n//   console.log('running')\n\n//   fetch(`http://localhost:3000/users/${id}`)\n//   .then(res => res.json())\n//   .then(data=> \n//     {console.log(data)\n//   dispatch({type:'LOGIN_SUCCESS', user: data.user, logged: true, portfolio: data.user.portfolios})}\n\n//   )\n// }\n\n// logout\nexport const handleLogout=(e, history)=> dispatch=>{\n  // console.log(e.target)\n  e.preventDefault()\n  localStorage.clear()\n  // console.log(history.push)\n   dispatch({\n    type: 'LOGOUT',\n    logged: false\n  })\n  history.push('/')\n\n}\n\n\nexport const  sellStock = (e, eachStock,balance)=> dispatch=> {\n  e.preventDefault()\n  // console.log(e.target)\n  let stock ={\n    price: parseFloat(eachStock.price),\n    ticker: eachStock.ticker,\n    quantity: -parseInt(e.target.quantity.value),\n    total_price: -parseFloat(eachStock.price * e.target.quantity.value),\n    user_id: parseInt(localStorage.uid)\n\n  }\n  \n  let user ={\n    remaining_balance: balance.remaining_balance - stock.total_price,\n    invested_balance: balance.invested_balance + stock.total_price\n  }\n  \n  fetch(`http://localhost:3000/portfolios`,{\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n      body: JSON.stringify({portfolio: stock})\n    })\n\n    fetch(`http://localhost:3000/users/${id}`,{\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Access-Token\":localStorage.getItem('token')\n      },\n        body: JSON.stringify({user: user})\n      })\n      .then(res=> res.json()\n    .then(data=> console.log(data)))\n\n\n  dispatch({type: 'SELL_STOCK', payload: stock})\n  e.target.reset()\n\n  }"]},"metadata":{},"sourceType":"module"}