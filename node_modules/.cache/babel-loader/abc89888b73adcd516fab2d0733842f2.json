{"ast":null,"code":"var _jsxFileName = \"/Users/Krunal/flatiron_school/module-5-folder/investiversity-frontend/src/components/Chart.js\";\nimport React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport { snapshot } from '../chartFunctions';\nimport { connect } from 'react-redux';\n\nfunction Chart(props) {\n  let obj = {\n    'remaining_balance': props.remaining_balance,\n    'invested_balance': props.invested_balance // console.log(snapshot)\n\n  };\n  return React.createElement(Doughnut, {\n    width: 300,\n    height: 300,\n    data: snapshot(obj),\n    options: {\n      maintainAspectRatio: true,\n      responsive: false,\n      cutoutPercentage: 50,\n      animation: {\n        animateScale: true,\n        animateRotate: true\n      },\n      // tooltips: {\n      //   callbacks: {\n      //     label: function(tooltipItem, data) {\n      //       var dataset = data.datasets[tooltipItem.datasetIndex];\n      //       var total = dataset.data.reduce(function(previousValue, currentValue, currentIndex, array) {\n      //         return previousValue + currentValue;\n      //       }); var currentValue = dataset.data[tooltipItem.index];\n      //       var percentage = Math.floor(((currentValue/total) * 100)+0.5);         \n      //       return percentage + \"%\";}}}\n      tooltips: {\n        callbacks: {\n          label: function (tooltipItem, data) {\n            var dataset = data.datasets[tooltipItem.datasetIndex];\n\n            var meta = dataset._meta[Object.keys(dataset._meta)[0]];\n\n            var total = parseFloat(meta.total).toFixed(2);\n            var currentValue = dataset.data[tooltipItem.index];\n            var percentage = parseFloat((currentValue / total * 100).toFixed(1));\n            return currentValue + ' (' + percentage + '%)';\n          },\n          title: function (tooltipItem, data) {\n            return data.labels[tooltipItem[0].index];\n          }\n        }\n      }\n    },\n    legend: {\n      display: true,\n      position: 'top',\n      fullWidth: true,\n      reverse: false,\n      text: 'center',\n      labels: {\n        fontColor: 'white'\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  });\n}\n\nconst mapStateToProps = state => {\n  return state.stock;\n};\n\nexport default connect(mapStateToProps)(Chart);","map":{"version":3,"sources":["/Users/Krunal/flatiron_school/module-5-folder/investiversity-frontend/src/components/Chart.js"],"names":["React","Doughnut","snapshot","connect","Chart","props","obj","remaining_balance","invested_balance","maintainAspectRatio","responsive","cutoutPercentage","animation","animateScale","animateRotate","tooltips","callbacks","label","tooltipItem","data","dataset","datasets","datasetIndex","meta","_meta","Object","keys","total","parseFloat","toFixed","currentValue","index","percentage","title","labels","display","position","fullWidth","reverse","text","fontColor","mapStateToProps","state","stock"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAAUC,QAAV,QAA2B,mBAA3B;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAIC,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACrB,MAAIC,GAAG,GAAG;AAAC,yBAAoBD,KAAK,CAACE,iBAA3B;AACE,wBAAoBF,KAAK,CAACG,gBAD5B,CAEZ;;AAFY,GAAV;AAIA,SACU,oBAAC,QAAD;AACE,IAAA,KAAK,EAAE,GADT;AAEE,IAAA,MAAM,EAAE,GAFV;AAGE,IAAA,IAAI,EAAEN,QAAQ,CAACI,GAAD,CAHhB;AAIE,IAAA,OAAO,EAAE;AACPG,MAAAA,mBAAmB,EAAE,IADd;AAEPC,MAAAA,UAAU,EAAE,KAFL;AAGPC,MAAAA,gBAAgB,EAAE,EAHX;AAKPC,MAAAA,SAAS,EAAC;AACRC,QAAAA,YAAY,EAAE,IADN;AAERC,QAAAA,aAAa,EAAE;AAFP,OALH;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAE,UAASC,WAAT,EAAsBC,IAAtB,EAA4B;AACjC,gBAAIC,OAAO,GAAGD,IAAI,CAACE,QAAL,CAAcH,WAAW,CAACI,YAA1B,CAAd;;AACA,gBAAIC,IAAI,GAAGH,OAAO,CAACI,KAAR,CAAcC,MAAM,CAACC,IAAP,CAAYN,OAAO,CAACI,KAApB,EAA2B,CAA3B,CAAd,CAAX;;AACA,gBAAIG,KAAK,GAAGC,UAAU,CAACL,IAAI,CAACI,KAAN,CAAV,CAAuBE,OAAvB,CAA+B,CAA/B,CAAZ;AACA,gBAAIC,YAAY,GAAGV,OAAO,CAACD,IAAR,CAAaD,WAAW,CAACa,KAAzB,CAAnB;AACA,gBAAIC,UAAU,GAAGJ,UAAU,CAAC,CAACE,YAAY,GAACH,KAAb,GAAmB,GAApB,EAAyBE,OAAzB,CAAiC,CAAjC,CAAD,CAA3B;AACA,mBAAOC,YAAY,GAAG,IAAf,GAAsBE,UAAtB,GAAmC,IAA1C;AACD,WARQ;AASTC,UAAAA,KAAK,EAAE,UAASf,WAAT,EAAsBC,IAAtB,EAA4B;AACjC,mBAAOA,IAAI,CAACe,MAAL,CAAYhB,WAAW,CAAC,CAAD,CAAX,CAAea,KAA3B,CAAP;AACD;AAXQ;AADH;AAnBH,KAJX;AAuCA,IAAA,MAAM,EAAE;AACNI,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,QAAQ,EAAE,KAFJ;AAGNC,MAAAA,SAAS,EAAE,IAHL;AAINC,MAAAA,OAAO,EAAE,KAJH;AAKNC,MAAAA,IAAI,EAAE,QALA;AAONL,MAAAA,MAAM,EAAE;AACNM,QAAAA,SAAS,EAAE;AADL;AAPF,KAvCR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADV;AAqDD;;AAGD,MAAMC,eAAe,GAAGC,KAAD,IAAS;AAC9B,SAAOA,KAAK,CAACC,KAAb;AACD,CAFD;;AAIA,eAAexC,OAAO,CAACsC,eAAD,CAAP,CAAyBrC,KAAzB,CAAf","sourcesContent":["import React from 'react'\nimport { Doughnut } from 'react-chartjs-2'\nimport  { snapshot }  from '../chartFunctions'\nimport {connect} from 'react-redux'\n\n\n\n function Chart(props) {\n  let obj = {'remaining_balance':props.remaining_balance,\n              'invested_balance': props.invested_balance}\n// console.log(snapshot)\n\n  return (\n            <Doughnut\n              width={300}\n              height={300}\n              data={snapshot(obj)}\n              options={{\n                maintainAspectRatio: true,\n                responsive: false,\n                cutoutPercentage: 50,\n              \n                animation:{\n                  animateScale: true,\n                  animateRotate: true \n                },\n                // tooltips: {\n                //   callbacks: {\n                //     label: function(tooltipItem, data) {\n                //       var dataset = data.datasets[tooltipItem.datasetIndex];\n                //       var total = dataset.data.reduce(function(previousValue, currentValue, currentIndex, array) {\n                //         return previousValue + currentValue;\n                //       }); var currentValue = dataset.data[tooltipItem.index];\n                //       var percentage = Math.floor(((currentValue/total) * 100)+0.5);         \n                //       return percentage + \"%\";}}}\n\n                tooltips: {\n                  callbacks: {\n                    label: function(tooltipItem, data) {\n                      var dataset = data.datasets[tooltipItem.datasetIndex];\n                      var meta = dataset._meta[Object.keys(dataset._meta)[0]];\n                      var total = parseFloat(meta.total).toFixed(2);\n                      var currentValue = dataset.data[tooltipItem.index];\n                      var percentage = parseFloat((currentValue/total*100).toFixed(1));\n                      return currentValue + ' (' + percentage + '%)';\n                    },\n                    title: function(tooltipItem, data) {\n                      return data.labels[tooltipItem[0].index];\n                    }\n                  }\n                }\n              }}\n            legend={{\n              display: true,\n              position: 'top',\n              fullWidth: true,\n              reverse: false,\n              text: 'center',\n              \n              labels: {\n                fontColor: 'white'\n              }\n            }}\n             />\n  )\n}\n\n\nconst mapStateToProps =(state)=>{\n  return state.stock\n}\n\nexport default connect(mapStateToProps)(Chart);\n\n\n\n"]},"metadata":{},"sourceType":"module"}