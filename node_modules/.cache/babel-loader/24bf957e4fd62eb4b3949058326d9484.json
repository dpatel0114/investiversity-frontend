{"ast":null,"code":"import _objectSpread from \"/Users/Krunal/flatiron_school/module-5-folder/investiversity-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst initialState = {\n  items: [],\n  firstname: '',\n  user: {\n    username: '',\n    email: ''\n  },\n  remaining_balance: '',\n  invested_balance: '',\n  error: '',\n  logged: '',\n  bestMatches: [],\n  portfolio: [],\n  sell_stock: [],\n  porthistory: [],\n  info: [],\n  chartPrice: []\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case 'GET_STOCKS':\n      return _objectSpread({}, state, {\n        items: action.data\n      });\n\n    case 'TEST':\n      console.log('hey');\n      return _objectSpread({}, state);\n\n    case \"GET_COM_INFO\":\n      return _objectSpread({}, state, {\n        info: action.data\n      });\n\n    case \"GET_CHART_PRICE\":\n      {\n        return _objectSpread({}, state, {\n          chartPrice: action.data\n        });\n      }\n    // case \"CHANGE_USER\":\n    //   return { ...state, user: {...state.user, username: action.username}}\n    // case \"CHANGE_PASS\":\n    //   return { ...state, user: {...state.user, password: action.password}}\n\n    case \"LOGOUT\":\n      return _objectSpread({}, state, {\n        logged: false\n      });\n\n    case \"PORT_HISTORY\":\n      return _objectSpread({}, state, {\n        porthistory: action.data // case \"OPEN_MODAL\": {\n        //   return {...state, showModal: action.showModal, infoId: action.infoId}\n        // }\n        // case \"CLOSE_MODAL\": {\n        //   return { ...state, showModal: false, infoId: 0 }\n        // }\n\n      });\n\n    case \"LOGIN_ERROR\":\n      return _objectSpread({}, state, {\n        error: action.error\n      });\n\n    case \"UPDATE_BALANCE\":\n      return _objectSpread({}, state, {\n        remaining_balance: action.payload.remaining_balance,\n        invested_balance: action.payload.invested_balance,\n        logged: true,\n        portfolio: action.payload.portfolios\n      });\n\n    case \"LOGIN_SUCCESS\":\n      // debugger\n      return _objectSpread({}, state, {\n        logged: action.logged,\n        remaining_balance: action.user.remaining_balance,\n        invested_balance: action.user.invested_balance,\n        portfolio: action.portfolio,\n        user: _objectSpread({}, state.user, {\n          username: action.user.username,\n          email: action.user.email,\n          firstname: action.user.firstname,\n          lastname: action.user.lastname\n        })\n      });\n\n    case \"SIGNUP_ERROR\":\n      {\n        return _objectSpread({}, state, {\n          error: action.error\n        });\n      }\n\n    case \"SEARCH_STOCK\":\n      {\n        return _objectSpread({}, state, {\n          bestMatches: action.payload\n        });\n      }\n\n    case \"GET_PORTFOLIO\":\n      {\n        if (action.payload.portfolio.length === 0) {\n          return _objectSpread({}, state, {\n            remaining_balance: 1000,\n            invested_balance: 0\n          });\n        } else {\n          return _objectSpread({}, state, {\n            portfolio: action.payload.portfolio,\n            remaining_balance: action.payload.user.remaining_balance,\n            invested_balance: action.payload.user.invested_balance,\n            firstname: action.payload.user.firstname\n          });\n        }\n      }\n\n    case \"SELL_STOCK\":\n      {\n        let new_portfolio = state.portfolio;\n        new_portfolio.map(s => {\n          if (s.ticker === action.payload.ticker) {\n            s.quantity += action.payload.quantity;\n            s.total_price += action.payload.total_price;\n          }\n        });\n        return _objectSpread({}, state, {\n          portfolio: new_portfolio,\n          remaining_balance: state.remaining_balance - action.payload.total_price,\n          invested_balance: state.invested_balance + action.payload.total_price\n        });\n      }\n\n    case \"PERSIST_DATA\":\n      {\n        return _objectSpread({}, state, {\n          portfolio: action.portfolio,\n          remaining_balance: action.remaining_balance,\n          invested_balance: action.invested_balance\n        });\n      }\n\n    case \"BUY_STOCK\":\n      {\n        if (state.remaining_balance >= action.payload.total_price) {\n          let flag = false;\n          let new_portfolio = state.portfolio;\n          new_portfolio.map(s => {\n            if (s.ticker === action.payload.ticker) {\n              s.quantity += action.payload.quantity;\n              s.total_price += action.payload.total_price;\n              flag = true;\n            }\n          });\n          return _objectSpread({}, state, {\n            remaining_balance: state.remaining_balance - action.payload.total_price,\n            invested_balance: state.invested_balance + action.payload.total_price,\n            portfolio: flag ? new_portfolio : [...state.portfolio, action.payload]\n          });\n        } else {\n          alert('Not Enough Balance');\n        }\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/Krunal/flatiron_school/module-5-folder/investiversity-frontend/src/reducers/stock.js"],"names":["initialState","items","firstname","user","username","email","remaining_balance","invested_balance","error","logged","bestMatches","portfolio","sell_stock","porthistory","info","chartPrice","state","action","type","data","console","log","payload","portfolios","lastname","length","new_portfolio","map","s","ticker","quantity","total_price","flag","alert"],"mappings":"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","sourcesContent":["\n\nconst initialState = {\n  items: [],\n  firstname:'',\n  user: {\n    username:'',\n    email: ''\n  },\n  remaining_balance: '',\n  invested_balance:'',\n  error:'',\n  logged: '',\n  bestMatches:[],\n  portfolio: [], \n  sell_stock: [],\n  porthistory: [],\n  info: [],\n  chartPrice: []\n\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type){\n    case 'GET_STOCKS': \n      return { ...state, items: action.data}\n    \n      case 'TEST':\n        console.log('hey')\n      return {...state}\n    \n      case \"GET_COM_INFO\":\n      return {...state, info: action.data}\n\n      case \"GET_CHART_PRICE\":{\n        return {...state, chartPrice: action.data}\n      }\n    // case \"CHANGE_USER\":\n    //   return { ...state, user: {...state.user, username: action.username}}\n\n    // case \"CHANGE_PASS\":\n    //   return { ...state, user: {...state.user, password: action.password}}\n\n    case \"LOGOUT\":\n      return {...state, logged: false}\n\n    case \"PORT_HISTORY\":\n      return {...state, porthistory: action.data}\n\n    // case \"OPEN_MODAL\": {\n    //   return {...state, showModal: action.showModal, infoId: action.infoId}\n    // }\n\n    // case \"CLOSE_MODAL\": {\n    //   return { ...state, showModal: false, infoId: 0 }\n    // }\n\n    case \"LOGIN_ERROR\":\n      return { ...state, error: action.error}\n\n    case \"UPDATE_BALANCE\":\n      return {...state, remaining_balance: action.payload.remaining_balance, invested_balance: action.payload.invested_balance,\n             logged: true, portfolio: action.payload.portfolios}\n    \n\n    case \"LOGIN_SUCCESS\":\n      // debugger\n      return { ...state, logged: action.logged, remaining_balance: action.user.remaining_balance,\n        invested_balance: action.user.invested_balance , portfolio: action.portfolio, user: {...state.user, username: action.user.username, email: action.user.email, firstname: action.user.firstname, lastname: action.user.lastname}\n      }\n    \n    case \"SIGNUP_ERROR\":{\n      return { ...state, error:action.error}\n    }\n\n    case \"SEARCH_STOCK\":{\n      return { ...state, bestMatches: action.payload}\n    }\n    case \"GET_PORTFOLIO\":{\n    \n      if(action.payload.portfolio.length===0){\n        return {...state,remaining_balance: 1000,\n          invested_balance: 0}\n      }else{\n      return { ...state, portfolio: action.payload.portfolio,\n         remaining_balance: action.payload.user.remaining_balance,\n        invested_balance: action.payload.user.invested_balance ,\n        firstname: action.payload.user.firstname\n      }\n      }\n    }\n    \n    case \"SELL_STOCK\":{\n\n      let new_portfolio = state.portfolio\n        new_portfolio.map(s => {\n          if(s.ticker === action.payload.ticker){\n            s.quantity += action.payload.quantity\n            s.total_price += action.payload.total_price\n          }})\n      \n      return { ...state, portfolio:new_portfolio,\n        remaining_balance: state.remaining_balance - action.payload.total_price,\n        invested_balance: state.invested_balance + action.payload.total_price,}\n    }\n\n    case \"PERSIST_DATA\":{\n      return {...state,\n      portfolio: action.portfolio,\n      remaining_balance: action.remaining_balance,\n      invested_balance: action.invested_balance}\n    }\n\n    case \"BUY_STOCK\":{     \n      if (state.remaining_balance >= action.payload.total_price){\n\n        let flag = false\n        let new_portfolio = state.portfolio\n        new_portfolio.map(s => {\n          if(s.ticker === action.payload.ticker){\n            s.quantity += action.payload.quantity\n            s.total_price += action.payload.total_price\n            flag = true\n          }})\n        return {\n          ...state,\n          remaining_balance: state.remaining_balance - action.payload.total_price,\n          invested_balance: state.invested_balance + action.payload.total_price,\n          portfolio: flag? new_portfolio : [...state.portfolio,action.payload]\n        }\n\n      }else{\n        alert('Not Enough Balance')\n      }\n    }\n    \n    default: \n      return state  \n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}